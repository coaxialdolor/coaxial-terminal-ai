# >>> TERMINALAI SHELL INTEGRATION START
# Added by TerminalAI (https://github.com/coaxialdolor/terminalai)
# This shell function enables seamless stateful command execution.
# Prompts and errors from the Python script are sent to stderr and are visible in the terminal.
function global:ai {
    [CmdletBinding(SupportsShouldProcess=$true)]
    Param(
        [Parameter(Mandatory=$false, ValueFromRemainingArguments=$true)]
        [string[]]$Arguments
    )

    Set-Variable -Name TERMINALAI_SHELL_INTEGRATION -Value "1" -Scope Global -Force

    $aiCommandPath = (Get-Command -Name ai -CommandType Application -ErrorAction Stop | Select-Object -First 1).Source
    if (-not $aiCommandPath) {
        Write-Error "Could not resolve path for 'ai' command. Ensure it's in your PATH."
        Remove-Variable -Name TERMINALAI_SHELL_INTEGRATION -Scope Global -ErrorAction SilentlyContinue
        return
    }

    $processInfo = New-Object System.Diagnostics.ProcessStartInfo
    $processInfo.FileName = $aiCommandPath

    $processedArgs = $Arguments | ForEach-Object {
        # If an argument contains a space and is not already quoted, quote it.
        if ($_ -match '\s' -and -not ($_.StartsWith('"') -and $_.EndsWith('"'))) {
            '"' + $_ + '"'
        } else {
            $_
        }
    }
    $joinedArgs = $processedArgs -join ' '
    $processInfo.Arguments = $joinedArgs

    $processInfo.UseShellExecute = $false
    $processInfo.RedirectStandardOutput = $true
    $processInfo.RedirectStandardError = $true
    $processInfo.RedirectStandardInput = $false

    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $processInfo

    try {
        $process.Start() | Out-Null
        $process.WaitForExit()

        $outputFromAI = $process.StandardOutput.ReadToEnd()
        $errorOutputFromAI = $process.StandardError.ReadToEnd()

        if ($errorOutputFromAI) {
            [System.Console]::Error.Write($errorOutputFromAI)
        }
        if ($outputFromAI) {
            [System.Console]::Out.Write($outputFromAI)
        }

    } catch {
        Write-Error "Error executing 'ai': $_"
    } finally {
        Remove-Variable -Name TERMINALAI_SHELL_INTEGRATION -Scope Global -ErrorAction SilentlyContinue
        $process.Dispose()
    }
}
# <<< TERMINALAI SHELL INTEGRATION END